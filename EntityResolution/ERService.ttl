# Software Name : Dependencies inference
 # Version: 0.0
 # SPDX-FileCopyrightText: Copyright (c) 2022[-2022] Orange
 # SPDX-License-Identifier: AGPL-3.0-only
 #
 # This software is distributed under the GNU Affero General Public License v3.0 only,
 # the text of which is available at https://spdx.org/licenses/AGPL-3.0-only.html
 # or see the "license.txt" file for more details.
 #
 # Author: Amal GUITTOUM
 # Software description: Dependencies inference in smart home scenarios
@prefix dp: <http://www.semanticweb.org/OrangeLab/ontologies/2021/9/IoTD#> .
@prefix dk: <http://www.data-knowledge.org/dk/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix core: <https://saref.etsi.org/core/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix eupont: <http://elite.polito.it/ontologies/eupont.owl#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@base <http://www.semanticweb.org/OrangeLab/ontologies/2021/9/IoTD> .
@prefix orgIoT: <http://orange-labs.fr/fog/ont/iot.owl#> .
@prefix afn: <http://jena.apache.org/ARQ/function#> .

dp:similarityFunction
	a sh:SPARQLFunction ;
	rdfs:comment "Calculate string distance between $op1 and $op2." ;
	sh:parameter [
		sh:path dp:op1 ;
		sh:datatype xsd:string ;
		sh:description "The first operand" ;
	] ;
	sh:parameter [
		sh:path dp:op2 ;
		sh:datatype xsd:string ;
		sh:description "The second operand" ;
	] ;
	sh:returnType xsd:double ;
	sh:select """
		SELECT (<http://www.example.org/JaroSimilarity>($op1, $op2) AS ?result)
		WHERE {
		}
		""" .
dp:strictStringMatching
	a sh:SPARQLFunction ;
	rdfs:comment "Calculate string distance between $op1 and $op2." ;
	sh:parameter [
		sh:path dp:op1 ;
		sh:datatype xsd:string ;
		sh:description "The first operand" ;
	] ;
	sh:parameter [
		sh:path dp:op2 ;
		sh:datatype xsd:string ;
		sh:description "The second operand" ;
	] ;
	sh:returnType xsd:double ;
	sh:select """
		SELECT (<http://www.example.org/StrictStringFunction>($op1, $op2) AS ?result)
		WHERE {
		}
		""" .
dp:EntityResolution
  rdf:type sh:NodeShape ;
  sh:targetClass core:Service ;

  sh:rule [
      rdf:type sh:SPARQLRule ;

      sh:construct """
                  PREFIX dp: <http://www.semanticweb.org/OrangeLab/ontologies/2021/9/IoTD#>
                  PREFIX ex: <http://www.example.org/>
                  PREFIX owl: <http://www.w3.org/2002/07/owl#>
                  PREFIX orgIoT: <http://orange-labs.fr/fog/ont/iot.owl#>
                  PREFIX core: <https://saref.etsi.org/core/>



			CONSTRUCT {
            				$this owl:sameAs ?service .
            			}
            			WHERE {


                            {
                            SELECT $this ?service
                            WHERE
                            {
                               {
                                 SELECT $this (MAX(?w1*dp:similarityFunction(?n21, ?n11)+?w3*dp:strictStringMatching(?ip21, ?ip11)+?w2*dp:similarityFunction(?nd21, ?nd11)) AS ?val)
                                   WHERE
                                   {
                                       OPTIONAL {$this dp:hasServiceName ?n2 .}
                                       OPTIONAL {$this dp:hasIPAddress ?ip2.}
                                       OPTIONAL {$this dp:hasDeviceName ?nd2.}

                                       $this orgIoT:source ?s .

                                        ?service dp:hasServiceName ?n1 .

                                        ?device core:offers ?service.
                                        ?device dp:hasDeviceName ?nd1.
                                        OPTIONAL {?device dp:hasIPAddress ?ip1.}

                                       ?service orgIoT:source ?src .

                                       BIND(IF(BOUND(?n1),0.4,0) AS ?w1).
                                       BIND(IF(BOUND(?n1),?n1,"") AS ?n11).
                                       BIND(IF(BOUND(?n2),?n2,"") AS ?n21).
                                       BIND(IF(BOUND(?ip1),0.9,0) AS ?w3).
                                       BIND(IF(BOUND(?ip1),?ip1,"") AS ?ip11).
                                       BIND(IF(BOUND(?ip2),?ip2,"") AS ?ip21).
                                       BIND(IF(BOUND(?nd1),0.4,0) AS ?w2).
                                       BIND(IF(BOUND(?nd1),?nd1,"") AS ?nd11).
                                       BIND(IF(BOUND(?nd2),?nd2,"") AS ?nd21).


                                      FILTER (?service!=$this && ?s="out" && ?src="dm")

                                   }
                                 group by $this

                               }

                                  OPTIONAL {$this dp:hasServiceName ?n2 .}
                                  OPTIONAL {$this dp:hasIPAddress ?ip2.}
                                  OPTIONAL {$this dp:hasDeviceName ?nd2.}

                                  $this orgIoT:source ?s .
                                  ?service dp:hasServiceName ?n1 .

                                  ?device core:offers ?service.
                                  ?device dp:hasDeviceName ?nd1.
                                  OPTIONAL {?device dp:hasIPAddress ?ip1.}

                                  ?service orgIoT:source ?src .

                                 BIND(IF(BOUND(?n1),0.4,0) AS ?w1).
                                 BIND(IF(BOUND(?n1),?n1,"") AS ?n11).
                                 BIND(IF(BOUND(?n2),?n2,"") AS ?n21).
                                 BIND(IF(BOUND(?ip1),0.9,0) AS ?w3).
                                 BIND(IF(BOUND(?ip1),?ip1,"") AS ?ip11).
                                 BIND(IF(BOUND(?ip2),?ip2,"") AS ?ip21).
                                 BIND(IF(BOUND(?nd1),0.4,0) AS ?w2).
                                 BIND(IF(BOUND(?nd1),?nd1,"") AS ?nd11).
                                 BIND(IF(BOUND(?nd2),?nd2,"") AS ?nd21).
                              Filter(?service!=$this && ?s="out" && ?src="dm" && (?w1*dp:similarityFunction(?n21, ?n11)+?w3*dp:strictStringMatching(?ip21, ?ip11)+?w2*dp:similarityFunction(?nd21, ?nd11))=?val)


                           }
                         }
                       }




			""" ;

    ] ;
.